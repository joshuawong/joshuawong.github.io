<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-05T19:23:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-Question-Question</title>
    <link href="http://yoursite.com/2016/10/04/Java-Question/"/>
    <id>http://yoursite.com/2016/10/04/Java-Question/</id>
    <published>2016-10-04T13:55:54.000Z</published>
    <updated>2016-10-05T19:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>(1) <strong>面向对象的特征有哪些方面？</strong> </p>
<p>   a. abstract: include data abstract and behavior abstract. Abstract only cares about object has what kinds of attributes and function, does not concern about details.</p>
<p>   b. encapsulate: hide everything can be hided from outer object, and provide simple API and function for outer object.</p>
<p>   c. inherit: extends from existing class. Subclass &amp; superclass. Extends from existing class, subclass can reuse functions and data in superclass as well as add its own new functions, but subclass cannot take away any fields or function of superclass. Subclass cannot access private variable in superclass.</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* assume Employee class has a private attribute called salary; Manager extends from Employee, and has a attribute called bonus. There is a function called getSalary().*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> bonus + salary; <span class="comment">// this won't work.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   keyword: <strong><em>super</em></strong>.</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// here is the correct version</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> bonus + <span class="keyword">super</span>.salary; <span class="comment">// this won't work.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   Another usage of <strong><em>super</em></strong> is construction.</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> bonus)</span></span>&#123;</div><div class="line">  <span class="keyword">super</span>(name, salary, year);</div><div class="line">  bonus = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   Subclass can be assigned to super class.</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// example 1</span></div><div class="line">Employee someone = <span class="keyword">new</span> Manager(name, salary, year, bonus);</div><div class="line"><span class="comment">// example 2</span></div><div class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div></pre></td></tr></table></figure>
<p>   Keyword <strong><em>final</em></strong> can prevent override in inheritance. Function and field with <strong><em>final</em></strong> keyword cannot be overrided in subclass.</p>
<p>   d. polymorphism: enable same function can have different parameter list. Two ways to implement polymorphism: override(at compile time) and overload(at run time). </p>
<p>   ​</p>
<p>(2) <strong>访问修饰符public,private,protected,以及不写（默认）时的区别？</strong></p>
<table>
<thead>
<tr>
<th>keyword</th>
<th>same package</th>
<th>subclass</th>
<th>different package</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>private</td>
<td>true</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>deault</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>protected</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>(3) <strong>String 是最基本的数据类型吗？</strong> </p>
<p>   No. String is a reference type. Only 8 Primitive types. Except primitive types and enumeration type, the rest types are all reference type. </p>
<p>   primitive type is called by value; while reference type is called by reference.</p>
<p>   (which means using primitive variable as parameter to a function won’t change its value.)</p>
<p>   ​</p>
<p>(4) <strong>float f=3.4;是否正确？</strong></p>
<p>   No. Because 3.4 is double type. Cast double to float will cause accuracy problem. The correct ways are <strong>float x = (float)3.4</strong> or <strong>float x = 3.4F</strong></p>
<p>   ​</p>
<p>(5) <strong>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？</strong> </p>
<p>   In the former case, it is wrong. 1 is int type, down-casting cause accuracy proble. The latter one is right. <strong>s1 +=1</strong> equals to <strong>s1 = (short)s1 + 1</strong>.</p>
<p>   ​</p>
<p>(6) <strong>Java有没有goto？</strong> </p>
<p>   There is no <strong><em>goto</em></strong> and <strong><em>const</em></strong> keyword in new version of java.</p>
<p>   ​</p>
<p>(7) <strong>int和Integer有什么区别？</strong></p>
<p>   <strong>int</strong> is primitive type, <strong>Integer</strong> is a class, so it is reference type. AutoBoxing(since Java 5).</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoUnboxingTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">3</span>);</div><div class="line">        Integer b = <span class="number">3</span>;                  <span class="comment">// autoboxing 3 to Integer.</span></div><div class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</div><div class="line">        System.out.println(a == b);     <span class="comment">// false. two reference do not point to same object.</span></div><div class="line">        System.out.println(a == c);     <span class="comment">// true. a autoUnBoxing to int, then compare to c. </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   An example of autoboxing in interview:</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4 = <span class="number">150</span>;</div><div class="line"></div><div class="line">        System.out.println(f1 == f2);  <span class="comment">// true</span></div><div class="line">        System.out.println(f3 == f4);  <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   Here, the range of <strong>int</strong> is [-127, 128]. So if value of <strong>Integer</strong>in this range, java won’t auto boxing, instead, java will creat a <strong>int</strong> variable.  </p>
<p>   ​</p>
<p>(8) <strong>解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。</strong></p>
<p>   stack: primitive variable, reference of object and invoke of function are stored in stack.</p>
<p>   heap: object created by <strong>new</strong> and constructor are stored in heap.</p>
<p>   static area: value of variable are stored in static area.</p>
<p>   Operations in stack are fast, but stack is small, so when using stack should avoid memory overflow. Usually, large objects are stored in heap.</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello world"</span>);</div></pre></td></tr></table></figure>
<p>   In this example, <em>str</em> is stored in stack; <em>“Hello world”</em> is stored in static area; the object of String is stored in heap.</p>
<p>   ​</p>
<p>(9) <strong>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</strong> </p>
<p>   The former one is 12, the latter one is -11. The rule of round() is +0.5 then rounding.</p>
<p>   ​</p>
<p>(10) <strong>switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？</strong></p>
<p>   switch(expr), expr can be byte, char, int, enum(java 5), String(java 7). But long is still not available in switch.</p>
<p>   ​</p>
<p>(11)  <strong>用最有效率的方法计算2乘以8？</strong> </p>
<p>   Bit manipulation. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>&lt;&lt;<span class="number">3</span></div></pre></td></tr></table></figure>
<p>   Why we always select 31 when overriding <strong>hashCode()</strong>, because <strong>31 * num</strong> equals to <strong>(num &lt;&lt; 5) - num</strong>. The latter one is much faster than the former one.</p>
<p>   ​</p>
<p>(12) <strong>构造器（constructor）是否可被重写（override）？</strong></p>
<p>   constructor cannot be overrided, but it can be overloaded.</p>
<p>   ​</p>
<p>(13) <strong>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？</strong></p>
<p>   No. In <strong>equal()</strong> function, it requires hashCode of x should equals to hashCode of y. </p>
<p>   ​</p>
<p>(14) <strong>是否可以继承String类</strong></p>
<p>   No. <strong>String</strong> class is final.</p>
<p>   ​</p>
<p>(15) <strong>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</strong></p>
<p>   Call by value!!</p>
<p>   If primitive type, call by value, because variable value won’t change in origin object.</p>
<p>   If reference type, call by value, but parameter is a copy of variable address in momery. So the called function can change its value. <a href="http://blog.sina.com.cn/s/blog_4b622a8e0100c1bo.html" target="_blank" rel="external">reference</a></p>
<p>   ​</p>
<p>(16) <strong>String和StringBuilder、StringBuffer的区别？</strong></p>
<p>   The value of String cannot be modified directly. While, StringBuilder/StringBuffer’s value can modify directly. The difference between StringBuilder() and StringBuffer() is that StringBuilder() is used in single thread, it does’t contains <strong>synchronized</strong>, so its effectiveness is higher than StringBuffer(). This also means StringBuffer() is thread safety and StringBuilder isn’t.</p>
<p>   Interview Question 1: 什么情况下用+运算符进行字符串连接比调用StringBuffer/StringBuilder对象的append方法连接字符串性能更好？</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a” + “ simple” + “ test”;</div></pre></td></tr></table></figure>
<p>   JVM will view S1 as “This is only a simple test”, so in this case, String is more effective than StringBuilder().</p>
<p>   Interview Question 2: What is the output of this code?</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringEqualTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String s1 = <span class="string">"Programming"</span>;</div><div class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"Programming"</span>);</div><div class="line">        String s3 = <span class="string">"Program"</span> + <span class="string">"ming"</span>;</div><div class="line">        System.out.println(s1 == s2); 				<span class="comment">// false</span></div><div class="line">        System.out.println(s1 == s3);				<span class="comment">// true</span></div><div class="line">        System.out.println(s1 == s1.intern());		<span class="comment">// true</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>(17) <strong>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</strong></p>
<p>   Overload is in the same class, one function can be written in serveral function with different parameter list. Override is in superclass and subclass, function in subclass rewrite the same function in superclass. (Here, override cannot claim more exception than its superclass)</p>
<p>   ​</p>
<p>(18) <strong>char 型变量中能不能存贮一个中文汉字，为什么?</strong></p>
<p>   Yes. Because in java, char is stored in Unicode. Chinese character is Unicode.</p>
<p>(19) <strong>抽象类（abstract class）和接口（interface）有什么异同？</strong> </p>
<p>   Abstract class can have instance methods that implement a default behavior. An interface can only  declare constants and instance methods.   ​</p>
<p>(20) <strong>Java 中会存在内存泄漏吗，请简单描述。</strong></p>
<p>   In general, Java won’t leak memory, because it has garbage collection mechanism. </p>
<p>(21) <strong>抽象的（abstract）方法是否可同时是静态的（static, 是否可同时被synchronized修饰？</strong> </p>
<p>   (1) abstract method cannot be static, because abstract method must be override, while static method cannot be override.</p>
<p>   (2) synchronized is depended on how the method implement, so without implementation detail, we can say a method is synchronized.</p>
<p>(22) <strong>阐述静态变量和实例变量的区别。</strong></p>
<p>   A static variable is associated with the class as a entire part rather than with specific instances of a class. Instantiated variable must reply on Instant.</p>
<p>(23) <strong>GC是什么？为什么要有GC？</strong></p>
<p>   Garbage collection. It uses garbage collection to free the memory. By cleaning those objects that is no longer reference by any of the program.</p>
<p>(24) <strong>String s = new String(“xyz”);创建了几个字符串对象？</strong> </p>
<p>   Two. One is “xyz” in static area; the other one is object <strong>s</strong> in heap.</p>
<p>(25) <strong>接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</strong> </p>
<p>   (1) Yes, and interface enable multiple extends.</p>
<p>   (2) Abstract class can implements interface.</p>
<p>   (3) Abstract class can extends concrete class.</p>
<p>(26) <strong>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</strong></p>
<p>   Yes. But in Java, one “.java” source file can only contain one public class, and the class name should be as same as file name.</p>
<p>(27) <strong>Java 中的final关键字有哪些用法？</strong></p>
<p>   (1) modify class: that class cannot be extended.</p>
<p>   (2) modify method: that method cannot be override.</p>
<p>   (3) modify variable: that variable cannot be changed once it is initialized.</p>
<p>(28) <strong>内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制?</strong></p>
<p>   <strong>A inner class can access all the outer class’s object, include private variable and object.</strong></p>
<p>(29) <strong>指出下面程序的运行结果。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">      System.out.print(<span class="string">"1"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.print(<span class="string">"2"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">      System.out.print(<span class="string">"a"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.print(<span class="string">"b"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      A ab = <span class="keyword">new</span> B();</div><div class="line">      ab = <span class="keyword">new</span> B();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">​</div></pre></td></tr></table></figure>
<p>   The output is 1a2b2b. The first line of main function return “1a2b”, and “1a” is static print. </p>
<p>(30) <strong>数据类型之间的转换：</strong><br>     <strong>- 如何将字符串转换为基本数据类型？</strong><br>     <strong>- 如何将基本数据类型转换为字符串？</strong> </p>
<p>   (1) In Integer/Long/Double/.. class, there are methods called parseXXX(String) or valurOf(String),, these methods can return primitive data type.</p>
<p>   (2) The first method is use empty string(“”) and +; the second method is to invoke function  calueOf() in String class. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(1) &lt;strong&gt;面向对象的特征有哪些方面？&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;   a. abstract: include data abstract and behavior abstract. Abstract only cares about object 
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Runnable And Thread</title>
    <link href="http://yoursite.com/2016/10/02/Runnable-And-Thread/"/>
    <id>http://yoursite.com/2016/10/02/Runnable-And-Thread/</id>
    <published>2016-10-02T23:45:51.000Z</published>
    <updated>2016-10-04T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implement-multi-threads"><a href="#Implement-multi-threads" class="headerlink" title="Implement multi-threads"></a>Implement multi-threads</h2><p>In Java, there are two methods to implement multi-threads, the first one is to inherit <strong><em>Thread</em></strong> class, the second one is the implement <strong><em>Runnable</em></strong> interface.</p>
<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p><strong><em>Thread</em></strong> class is defined in <strong><em>java.lang</em></strong>. A class can implement multi-thread by inheriting <strong><em>Thread</em></strong> class and overriding <strong><em>run()</em></strong> function. But the limitation of this method is that one class can only inherit from one parent class.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyThread class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">      System.out.println(<span class="string">"Thread start: "</span> + <span class="keyword">this</span>.name + <span class="string">", i ="</span> + i);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Multi-thread example</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] main)</span></span>&#123;</div><div class="line">    MyThread thread1 = <span class="keyword">new</span> MyThread(<span class="string">"Thread A"</span>);</div><div class="line">    MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">"Thread B"</span>);</div><div class="line">    thread1.start();</div><div class="line">    thread2.start();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>In real world, we seldom use <strong><em>Thread</em></strong> class. Usually we use <strong><em>Runnable</em></strong> interface to implement multi-thread.</p>
<p>Advantages of implementing <strong><em>Runnable</em></strong> interface:</p>
<ol>
<li>avoid the limitation of single inhertiation, one class can implement multiple interfaces;</li>
<li>suitable for share resource.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Runnable interface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Example: rewrite MyThread class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">      System.out.println(<span class="string">"Thread start: "</span> + <span class="keyword">this</span>.name + <span class="string">", i ="</span> + i);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>However, in <strong><em>Runnable</em></strong>, there is no <strong><em>start()</em></strong> function. Now, we can use a construtor method</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span></span></div></pre></td></tr></table></figure>
<p>to instant <strong><em>Runnable</em></strong> subclass. Which means we can implement <strong><em>Runnable</em></strong> multi-thread by using <strong><em>Thread</em></strong> class.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.runnable.demo.MyThread;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">　　	MyThread thread1=<span class="keyword">new</span> MyThread(<span class="string">"thread A"</span>);</div><div class="line">　　	MyThread thread2=<span class="keyword">new</span> MyThread(<span class="string">"thread B"</span>);</div><div class="line">　　	<span class="keyword">new</span> Thread(thread1).start();</div><div class="line">　　	<span class="keyword">new</span> Thread(thread2).start();</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Lastly, <strong><em>Thread</em></strong> class is subclass of <strong><em>Runnable</em></strong> interface. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Implement-multi-threads&quot;&gt;&lt;a href=&quot;#Implement-multi-threads&quot; class=&quot;headerlink&quot; title=&quot;Implement multi-threads&quot;&gt;&lt;/a&gt;Implement multi-t
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jiahao&#39;s Blog</title>
    <link href="http://yoursite.com/2016/10/02/hello-world/"/>
    <id>http://yoursite.com/2016/10/02/hello-world/</id>
    <published>2016-10-02T23:13:36.000Z</published>
    <updated>2016-10-02T23:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is for Jiahao’s personal note.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is for Jiahao’s personal note.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
